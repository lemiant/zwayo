var monk = require('monk');
var db = monk('localhost:27017/nodetest');

module.exports = function(io){
    io.sockets.on('connection', function (socket) {
        socket.on('join2', function(data){
            dump_rooms(socket)
            socket.join(data.room)
            socket.d_room = data.room
            catch_me_up(socket, data.last)
            rooms = io.sockets.manager.roomClients[socket.id]
            console.log(rooms)
        })
        
        socket.on('action2', function(action){
            add_action(socket.d_room, action)
                .then(function(a){ console.log(a) })
        })
        
        socket.on('ping', function(){
            for(var i=0; i<3; i++){
                socket.emit("ping", "pingus "+i)
            }
        })
    });

    
function catch_me_up(socket, last){
    db.get('messages').findOne(
        {"name": socket.d_room}
        //{ fields: {actions:1}}
    ).then(function(party){
        actions = party.actions
            .filter(function(v){ return v._id > last })
            .sort(function(a, b){ return a._id - b._id } )
        socket.emit('update', actions)
    })
}

function add_action(room, action){
    parties = db.get('messages')
    promise = parties.findAndModify(
        {"name": room},
        {$inc : {"seq":1}},
        {
            fields:{"seq":1},
            upsert:true,
            new:true
        }
    ).then(function(party){
        console.log(party)
        action._id = party.seq
        io.sockets.in(room).emit('update', [action])
        return parties.update(
            {"name": room},
            {$push : {"actions": action}}
        )
    })
    return promise
}

function dump_rooms(socket){
    rooms = io.sockets.manager.roomClients[socket.id]
    for(old_room in rooms){
        if(old_room != '') socket.leave(old_room.slice(1))
    }
}
    
} //So everyon gets access to io